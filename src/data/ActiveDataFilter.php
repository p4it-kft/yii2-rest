<?php
namespace p4it\rest\server\data;


use p4it\rest\server\helpers\ArrayHelper;

class ActiveDataFilter extends \yii\data\ActiveDataFilter {

    public $attributeHaving = [];
    public $splitFilter = false;

    public $extraFilterControls = [
        'is' => 'is',
        'isn' => 'is not',
    ];

    public $extraOperatorTypes = [
        'is' => '*',
        'is not' => '*',
    ];

    public $extraConditionBuilders = [
        'is' => 'buildIsCondition',
        'is not' => 'buildIsCondition',
    ];

    public function init() {
        $this->filterControls = array_merge($this->filterControls, $this->extraFilterControls);
        $this->operatorTypes = array_merge($this->operatorTypes, $this->extraOperatorTypes);
        $this->conditionBuilders = array_merge($this->conditionBuilders, $this->extraConditionBuilders);

        parent::init(); // TODO: Change the autogenerated stub
    }

    protected function buildIsCondition($operator, $condition, $attribute) {
        if($condition === 'null') {
            $condition = null;
        }

        return $this->buildOperatorCondition($operator, $condition, $attribute);
    }

    protected function buildInternal()
    {
        if($this->splitFilter === false) {
            return parent::buildInternal();
        }

        $filter = $this->normalize(false);
        if (empty($filter)) {
            return [];
        }

        [$whereFilter, $havingFilter] = $this->splitFilter($filter);

        $whereFilter = $this->buildCondition($whereFilter);
        $havingFilter = $this->buildCondition($havingFilter);

        return ['whereFilter' => $whereFilter, 'havingFilter' => $havingFilter];
    }

    protected function splitFilter($filter) {

        $whereFilter = $filter;
        $havingFilter = [];
        foreach ($this->attributeHaving as $attribute) {
            $valuePath = ArrayHelper::getValueAndPath($filter, $attribute);
            if(!$valuePath) {
                continue;
            }

            $removedValue = ArrayHelper::removeValueByPath($whereFilter, $valuePath['path']);
            if($removedValue === false) {
                continue;
            }

            ArrayHelper::setValue($havingFilter,$valuePath['path'], $valuePath['value']);
        }

        return [$whereFilter, $havingFilter];
    }



}